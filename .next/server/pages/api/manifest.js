"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/manifest";
exports.ids = ["pages/api/manifest"];
exports.modules = {

/***/ "form-data":
/*!****************************!*\
  !*** external "form-data" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("form-data");

/***/ }),

/***/ "mime":
/*!***********************!*\
  !*** external "mime" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("mime");

/***/ }),

/***/ "structured-headers":
/*!*************************************!*\
  !*** external "structured-headers" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("structured-headers");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./common/helpers.ts":
/*!***************************!*\
  !*** ./common/helpers.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NoUpdateAvailableError\": () => (/* binding */ NoUpdateAvailableError),\n/* harmony export */   \"convertSHA256HashToUUID\": () => (/* binding */ convertSHA256HashToUUID),\n/* harmony export */   \"convertToDictionaryItemsRepresentation\": () => (/* binding */ convertToDictionaryItemsRepresentation),\n/* harmony export */   \"createNoUpdateAvailableDirectiveAsync\": () => (/* binding */ createNoUpdateAvailableDirectiveAsync),\n/* harmony export */   \"createRollBackDirectiveAsync\": () => (/* binding */ createRollBackDirectiveAsync),\n/* harmony export */   \"getAssetMetadataAsync\": () => (/* binding */ getAssetMetadataAsync),\n/* harmony export */   \"getExpoConfigAsync\": () => (/* binding */ getExpoConfigAsync),\n/* harmony export */   \"getLatestUpdateBundlePathForRuntimeVersionAsync\": () => (/* binding */ getLatestUpdateBundlePathForRuntimeVersionAsync),\n/* harmony export */   \"getMetadataAsync\": () => (/* binding */ getMetadataAsync),\n/* harmony export */   \"getPrivateKeyAsync\": () => (/* binding */ getPrivateKeyAsync),\n/* harmony export */   \"signRSASHA256\": () => (/* binding */ signRSASHA256),\n/* harmony export */   \"truthy\": () => (/* binding */ truthy)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var mime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mime */ \"mime\");\n/* harmony import */ var mime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(mime__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nclass NoUpdateAvailableError extends Error {\n}\nfunction createHash(file, hashingAlgorithm, encoding) {\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(hashingAlgorithm).update(file).digest(encoding);\n}\nfunction getBase64URLEncoding(base64EncodedString) {\n    return base64EncodedString.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}\nfunction convertToDictionaryItemsRepresentation(obj) {\n    return new Map(Object.entries(obj).map(([k, v])=>{\n        return [\n            k,\n            [\n                v,\n                new Map()\n            ]\n        ];\n    }));\n}\nfunction signRSASHA256(data, privateKey) {\n    const sign = crypto__WEBPACK_IMPORTED_MODULE_0___default().createSign(\"RSA-SHA256\");\n    sign.update(data, \"utf8\");\n    sign.end();\n    return sign.sign(privateKey, \"base64\");\n}\nasync function getPrivateKeyAsync() {\n    const privateKeyPath = process.env.PRIVATE_KEY_PATH;\n    if (!privateKeyPath) {\n        return null;\n    }\n    const pemBuffer = await fs_promises__WEBPACK_IMPORTED_MODULE_2___default().readFile(path__WEBPACK_IMPORTED_MODULE_4___default().resolve(privateKeyPath));\n    return pemBuffer.toString(\"utf8\");\n}\nasync function getLatestUpdateBundlePathForRuntimeVersionAsync(runtimeVersion) {\n    const updatesDirectoryForRuntimeVersion = `updates/${runtimeVersion}`;\n    if (!fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(updatesDirectoryForRuntimeVersion)) {\n        throw new Error(\"Unsupported runtime version\");\n    }\n    const filesInUpdatesDirectory = await fs_promises__WEBPACK_IMPORTED_MODULE_2___default().readdir(updatesDirectoryForRuntimeVersion);\n    const directoriesInUpdatesDirectory = (await Promise.all(filesInUpdatesDirectory.map(async (file)=>{\n        const fileStat = await fs_promises__WEBPACK_IMPORTED_MODULE_2___default().stat(path__WEBPACK_IMPORTED_MODULE_4___default().join(updatesDirectoryForRuntimeVersion, file));\n        return fileStat.isDirectory() ? file : null;\n    }))).filter(truthy).sort((a, b)=>parseInt(b, 10) - parseInt(a, 10));\n    return path__WEBPACK_IMPORTED_MODULE_4___default().join(updatesDirectoryForRuntimeVersion, directoriesInUpdatesDirectory[0]);\n}\nasync function getAssetMetadataAsync(arg) {\n    const assetFilePath = `${arg.updateBundlePath}/${arg.filePath}`;\n    const asset = await fs_promises__WEBPACK_IMPORTED_MODULE_2___default().readFile(path__WEBPACK_IMPORTED_MODULE_4___default().resolve(assetFilePath), null);\n    const assetHash = getBase64URLEncoding(createHash(asset, \"sha256\", \"base64\"));\n    const key = createHash(asset, \"md5\", \"hex\");\n    const keyExtensionSuffix = arg.isLaunchAsset ? \"bundle\" : arg.ext;\n    const contentType = arg.isLaunchAsset ? \"application/javascript\" : mime__WEBPACK_IMPORTED_MODULE_3___default().getType(arg.ext);\n    return {\n        hash: assetHash,\n        key,\n        fileExtension: `.${keyExtensionSuffix}`,\n        contentType,\n        url: `${process.env.HOSTNAME}/api/assets?asset=${assetFilePath}&runtimeVersion=${arg.runtimeVersion}&platform=${arg.platform}`\n    };\n}\nasync function createRollBackDirectiveAsync(updateBundlePath) {\n    try {\n        const rollbackFilePath = `${updateBundlePath}/rollback`;\n        const rollbackFileStat = await fs_promises__WEBPACK_IMPORTED_MODULE_2___default().stat(rollbackFilePath);\n        return {\n            type: \"rollBackToEmbedded\",\n            parameters: {\n                commitTime: new Date(rollbackFileStat.birthtime).toISOString()\n            }\n        };\n    } catch (error) {\n        throw new Error(`No rollback found. Error: ${error}`);\n    }\n}\nasync function createNoUpdateAvailableDirectiveAsync() {\n    return {\n        type: \"noUpdateAvailable\"\n    };\n}\nasync function getMetadataAsync({ updateBundlePath , runtimeVersion  }) {\n    try {\n        const metadataPath = `${updateBundlePath}/metadata.json`;\n        const updateMetadataBuffer = await fs_promises__WEBPACK_IMPORTED_MODULE_2___default().readFile(path__WEBPACK_IMPORTED_MODULE_4___default().resolve(metadataPath), null);\n        const metadataJson = JSON.parse(updateMetadataBuffer.toString(\"utf-8\"));\n        const metadataStat = await fs_promises__WEBPACK_IMPORTED_MODULE_2___default().stat(metadataPath);\n        return {\n            metadataJson,\n            createdAt: new Date(metadataStat.birthtime).toISOString(),\n            id: createHash(updateMetadataBuffer, \"sha256\", \"hex\")\n        };\n    } catch (error) {\n        throw new Error(`No update found with runtime version: ${runtimeVersion}. Error: ${error}`);\n    }\n}\n/**\n * This adds the `@expo/config`-exported config to `extra.expoConfig`, which is a common thing\n * done by implementors of the expo-updates specification since a lot of Expo modules use it.\n * It is not required by the specification, but is included here in the example client and server\n * for demonstration purposes. EAS Update does something conceptually very similar.\n */ async function getExpoConfigAsync({ updateBundlePath , runtimeVersion  }) {\n    try {\n        const expoConfigPath = `${updateBundlePath}/expoConfig.json`;\n        const expoConfigBuffer = await fs_promises__WEBPACK_IMPORTED_MODULE_2___default().readFile(path__WEBPACK_IMPORTED_MODULE_4___default().resolve(expoConfigPath), null);\n        const expoConfigJson = JSON.parse(expoConfigBuffer.toString(\"utf-8\"));\n        return expoConfigJson;\n    } catch (error) {\n        throw new Error(`No expo config json found with runtime version: ${runtimeVersion}. Error: ${error}`);\n    }\n}\nfunction convertSHA256HashToUUID(value) {\n    return `${value.slice(0, 8)}-${value.slice(8, 12)}-${value.slice(12, 16)}-${value.slice(16, 20)}-${value.slice(20, 32)}`;\n}\nfunction truthy(value) {\n    return !!value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./common/helpers.ts\n");

/***/ }),

/***/ "(api)/./pages/api/manifest.ts":
/*!*******************************!*\
  !*** ./pages/api/manifest.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ manifestEndpoint)\n/* harmony export */ });\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! form-data */ \"form-data\");\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(form_data__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var structured_headers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! structured-headers */ \"structured-headers\");\n/* harmony import */ var structured_headers__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(structured_headers__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _common_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/helpers */ \"(api)/./common/helpers.ts\");\n\n\n\n\nasync function manifestEndpoint(req, res) {\n    if (req.method !== \"GET\") {\n        res.statusCode = 405;\n        res.json({\n            error: \"Expected GET.\"\n        });\n        return;\n    }\n    const protocolVersionMaybeArray = req.headers[\"expo-protocol-version\"];\n    if (protocolVersionMaybeArray && Array.isArray(protocolVersionMaybeArray)) {\n        res.statusCode = 400;\n        res.json({\n            error: \"Unsupported protocol version. Expected either 0 or 1.\"\n        });\n        return;\n    }\n    const protocolVersion = parseInt(protocolVersionMaybeArray ?? \"0\", 10);\n    const platform = req.headers[\"expo-platform\"] ?? req.query[\"platform\"];\n    if (platform !== \"ios\" && platform !== \"android\") {\n        res.statusCode = 400;\n        res.json({\n            error: \"Unsupported platform. Expected either ios or android.\"\n        });\n        return;\n    }\n    const runtimeVersion = req.headers[\"expo-runtime-version\"] ?? req.query[\"runtime-version\"];\n    if (!runtimeVersion || typeof runtimeVersion !== \"string\") {\n        res.statusCode = 400;\n        res.json({\n            error: \"No runtimeVersion provided.\"\n        });\n        return;\n    }\n    let updateBundlePath;\n    try {\n        updateBundlePath = await (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.getLatestUpdateBundlePathForRuntimeVersionAsync)(runtimeVersion);\n    } catch (error) {\n        res.statusCode = 404;\n        res.json({\n            error: error.message\n        });\n        return;\n    }\n    const updateType = await getTypeOfUpdateAsync(updateBundlePath);\n    try {\n        try {\n            if (updateType === UpdateType.NORMAL_UPDATE) {\n                await putUpdateInResponseAsync(req, res, updateBundlePath, runtimeVersion, platform, protocolVersion);\n            } else if (updateType === UpdateType.ROLLBACK) {\n                await putRollBackInResponseAsync(req, res, updateBundlePath, protocolVersion);\n            }\n        } catch (maybeNoUpdateAvailableError) {\n            if (maybeNoUpdateAvailableError instanceof _common_helpers__WEBPACK_IMPORTED_MODULE_3__.NoUpdateAvailableError) {\n                await putNoUpdateAvailableInResponseAsync(req, res, protocolVersion);\n                return;\n            }\n            throw maybeNoUpdateAvailableError;\n        }\n    } catch (error1) {\n        console.error(error1);\n        res.statusCode = 404;\n        res.json({\n            error: error1\n        });\n    }\n}\nvar UpdateType;\n(function(UpdateType) {\n    UpdateType[UpdateType[\"NORMAL_UPDATE\"] = 0] = \"NORMAL_UPDATE\";\n    UpdateType[UpdateType[\"ROLLBACK\"] = 1] = \"ROLLBACK\";\n})(UpdateType || (UpdateType = {}));\nasync function getTypeOfUpdateAsync(updateBundlePath) {\n    const directoryContents = await fs_promises__WEBPACK_IMPORTED_MODULE_1___default().readdir(updateBundlePath);\n    return directoryContents.includes(\"rollback\") ? UpdateType.ROLLBACK : UpdateType.NORMAL_UPDATE;\n}\nasync function putUpdateInResponseAsync(req, res, updateBundlePath, runtimeVersion, platform, protocolVersion) {\n    const currentUpdateId = req.headers[\"expo-current-update-id\"];\n    const { metadataJson , createdAt , id  } = await (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.getMetadataAsync)({\n        updateBundlePath,\n        runtimeVersion\n    });\n    // NoUpdateAvailable directive only supported on protocol version 1\n    // for protocol version 0, serve most recent update as normal\n    if (currentUpdateId === id && protocolVersion === 1) {\n        throw new _common_helpers__WEBPACK_IMPORTED_MODULE_3__.NoUpdateAvailableError();\n    }\n    const expoConfig = await (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.getExpoConfigAsync)({\n        updateBundlePath,\n        runtimeVersion\n    });\n    const platformSpecificMetadata = metadataJson.fileMetadata[platform];\n    const manifest = {\n        id: (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.convertSHA256HashToUUID)(id),\n        createdAt,\n        runtimeVersion,\n        assets: await Promise.all(platformSpecificMetadata.assets.map((asset)=>(0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.getAssetMetadataAsync)({\n                updateBundlePath,\n                filePath: asset.path,\n                ext: asset.ext,\n                runtimeVersion,\n                platform,\n                isLaunchAsset: false\n            }))),\n        launchAsset: await (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.getAssetMetadataAsync)({\n            updateBundlePath,\n            filePath: platformSpecificMetadata.bundle,\n            isLaunchAsset: true,\n            runtimeVersion,\n            platform,\n            ext: null\n        }),\n        metadata: {},\n        extra: {\n            expoClient: expoConfig\n        }\n    };\n    let signature = null;\n    const expectSignatureHeader = req.headers[\"expo-expect-signature\"];\n    if (expectSignatureHeader) {\n        const privateKey = await (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.getPrivateKeyAsync)();\n        if (!privateKey) {\n            res.statusCode = 400;\n            res.json({\n                error: \"Code signing requested but no key supplied when starting server.\"\n            });\n            return;\n        }\n        const manifestString = JSON.stringify(manifest);\n        const hashSignature = (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.signRSASHA256)(manifestString, privateKey);\n        const dictionary = (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.convertToDictionaryItemsRepresentation)({\n            sig: hashSignature,\n            keyid: \"main\"\n        });\n        signature = (0,structured_headers__WEBPACK_IMPORTED_MODULE_2__.serializeDictionary)(dictionary);\n    }\n    const assetRequestHeaders = {};\n    [\n        ...manifest.assets,\n        manifest.launchAsset\n    ].forEach((asset)=>{\n        assetRequestHeaders[asset.key] = {\n            \"test-header\": \"test-header-value\"\n        };\n    });\n    const form = new (form_data__WEBPACK_IMPORTED_MODULE_0___default())();\n    form.append(\"manifest\", JSON.stringify(manifest), {\n        contentType: \"application/json\",\n        header: {\n            \"content-type\": \"application/json; charset=utf-8\",\n            ...signature ? {\n                \"expo-signature\": signature\n            } : {}\n        }\n    });\n    form.append(\"extensions\", JSON.stringify({\n        assetRequestHeaders\n    }), {\n        contentType: \"application/json\"\n    });\n    res.statusCode = 200;\n    res.setHeader(\"expo-protocol-version\", protocolVersion);\n    res.setHeader(\"expo-sfv-version\", 0);\n    res.setHeader(\"cache-control\", \"private, max-age=0\");\n    res.setHeader(\"content-type\", `multipart/mixed; boundary=${form.getBoundary()}`);\n    res.write(form.getBuffer());\n    res.end();\n}\nasync function putRollBackInResponseAsync(req, res, updateBundlePath, protocolVersion) {\n    if (protocolVersion === 0) {\n        throw new Error(\"Rollbacks not supported on protocol version 0\");\n    }\n    const embeddedUpdateId = req.headers[\"expo-embedded-update-id\"];\n    if (!embeddedUpdateId || typeof embeddedUpdateId !== \"string\") {\n        throw new Error(\"Invalid Expo-Embedded-Update-ID request header specified.\");\n    }\n    const currentUpdateId = req.headers[\"expo-current-update-id\"];\n    if (currentUpdateId === embeddedUpdateId) {\n        throw new _common_helpers__WEBPACK_IMPORTED_MODULE_3__.NoUpdateAvailableError();\n    }\n    const directive = await (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.createRollBackDirectiveAsync)(updateBundlePath);\n    let signature = null;\n    const expectSignatureHeader = req.headers[\"expo-expect-signature\"];\n    if (expectSignatureHeader) {\n        const privateKey = await (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.getPrivateKeyAsync)();\n        if (!privateKey) {\n            res.statusCode = 400;\n            res.json({\n                error: \"Code signing requested but no key supplied when starting server.\"\n            });\n            return;\n        }\n        const directiveString = JSON.stringify(directive);\n        const hashSignature = (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.signRSASHA256)(directiveString, privateKey);\n        const dictionary = (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.convertToDictionaryItemsRepresentation)({\n            sig: hashSignature,\n            keyid: \"main\"\n        });\n        signature = (0,structured_headers__WEBPACK_IMPORTED_MODULE_2__.serializeDictionary)(dictionary);\n    }\n    const form = new (form_data__WEBPACK_IMPORTED_MODULE_0___default())();\n    form.append(\"directive\", JSON.stringify(directive), {\n        contentType: \"application/json\",\n        header: {\n            \"content-type\": \"application/json; charset=utf-8\",\n            ...signature ? {\n                \"expo-signature\": signature\n            } : {}\n        }\n    });\n    res.statusCode = 200;\n    res.setHeader(\"expo-protocol-version\", 1);\n    res.setHeader(\"expo-sfv-version\", 0);\n    res.setHeader(\"cache-control\", \"private, max-age=0\");\n    res.setHeader(\"content-type\", `multipart/mixed; boundary=${form.getBoundary()}`);\n    res.write(form.getBuffer());\n    res.end();\n}\nasync function putNoUpdateAvailableInResponseAsync(req, res, protocolVersion) {\n    if (protocolVersion === 0) {\n        throw new Error(\"NoUpdateAvailable directive not available in protocol version 0\");\n    }\n    const directive = await (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.createNoUpdateAvailableDirectiveAsync)();\n    let signature = null;\n    const expectSignatureHeader = req.headers[\"expo-expect-signature\"];\n    if (expectSignatureHeader) {\n        const privateKey = await (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.getPrivateKeyAsync)();\n        if (!privateKey) {\n            res.statusCode = 400;\n            res.json({\n                error: \"Code signing requested but no key supplied when starting server.\"\n            });\n            return;\n        }\n        const directiveString = JSON.stringify(directive);\n        const hashSignature = (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.signRSASHA256)(directiveString, privateKey);\n        const dictionary = (0,_common_helpers__WEBPACK_IMPORTED_MODULE_3__.convertToDictionaryItemsRepresentation)({\n            sig: hashSignature,\n            keyid: \"main\"\n        });\n        signature = (0,structured_headers__WEBPACK_IMPORTED_MODULE_2__.serializeDictionary)(dictionary);\n    }\n    const form = new (form_data__WEBPACK_IMPORTED_MODULE_0___default())();\n    form.append(\"directive\", JSON.stringify(directive), {\n        contentType: \"application/json\",\n        header: {\n            \"content-type\": \"application/json; charset=utf-8\",\n            ...signature ? {\n                \"expo-signature\": signature\n            } : {}\n        }\n    });\n    res.statusCode = 200;\n    res.setHeader(\"expo-protocol-version\", 1);\n    res.setHeader(\"expo-sfv-version\", 0);\n    res.setHeader(\"cache-control\", \"private, max-age=0\");\n    res.setHeader(\"content-type\", `multipart/mixed; boundary=${form.getBoundary()}`);\n    res.write(form.getBuffer());\n    res.end();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/manifest.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/manifest.ts"));
module.exports = __webpack_exports__;

})();